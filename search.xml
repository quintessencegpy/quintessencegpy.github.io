<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[你不知道的 View Controller Containment]]></title>
    <url>%2F2019%2F06%2F21%2Fviewcontroller-containment%2F</url>
    <content type="text"><![CDATA[本文主要记录在工作过程中如何利用 View Controller Containment 来重构 UI 前言不知道你有没有经历过这样的情况，一个页面中有很多的 View，但各个 View 之间有明显的层级关系，这个时候一种可行的做法是把一系列相关联的 View 归到一个父亲 View 中。 但这种做法会有有一些其他的问题， 比如会让 View Controller 或者 View Model 比较大， 甚至有时候不得不把逻辑写在 View 里边。那么有没有一个既可以解决问题， 又不会引入更多棘手的问题的方法吗？ 问得好！ 如果你心里真的这个问题，那说明你一定是在质疑我写这篇分享的初衷。 不过别担心，看到最后我保证你一定会有所收获的。 背景铺垫了这么多，你可能会想: View Controller Containment 到底是什么个玩意，从来没听说过，确定会有人用这个吗？ 但是接下来我会打消你的疑虑，因为苹果自己就在设计 UINavigationController 和 UITabBarController 利用了这种模式。在UINavigationController 和 UITabBarController 中你都可以塞入自定义的控制器， 只不过他们控制这些控制器的形式不同（一个是堆叠，一个是平行）。 那么 View Controller Containment 到底是什么呢？ 其实非常简单，就是把一个控制器当作容器，只不过这个控制器比较特别一点，它不止能控制 View， 还可以控制在它里边的控制器。 这种模式中，父控制器只需要来管理和安排子控制器 View 的布局和大小，而子控制器负责它自己内部各个 View 的布局和大小。 优点听起来如此简单的改变，能给我们带来什么呢？这就需要讨论一下 View Controller Containment 的优点。 可复用性利用 View Controller Containment 一个很大的优点就是可复用性，比如上边提到的苹果自带 SDK 中的 UINavigationController 和 UITabBarController 都有极大的可复用性，基本上在每个项目中都会用到。在项目中我们有时候也会碰到一些情况会有需要复用 Root View Controller 的情况。比如我在最近的一个项目中，会碰到有在同一个页面有三个区块，并且在项目不同的地方会对它们做相同的布局甚至动画。所以这种情况下抽出来一个可复用的 Root View Controller 就会极大的提高工作效率。 逻辑分离对于一些比较复杂的页面，分出来不同的控制器，让子控制器来控制各自的逻辑，这样会让整个 UI 的结构更加清晰，每一个控制器的职责更加明确，会有更强的拓展性，以后如果想加入新的功能或者动画，我们只需要加入新的控制器，最多再加几个回调和代理，并不需要对原来的 UI 结构有很大的改动。 举例拿我现在做的一个直播页边来举例，里边有比较明显的三个区块，一个课件区，一个视频区，一个是讨论区。每个区块上边还有一些相关的 View。 所以我觉得可以用 View Controller Containment 来实现。 用一个 MasterViewController 来管理这三个区域。 这三个区域也是不同的子控制器。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import UIKitclass VideoViewController: UIViewController &#123;&#125;class KeynoteViewController: UIViewController &#123;&#125;class ChatViewController: UIViewController &#123;&#125;final class MasterViewControlller: UIViewController &#123; private lazy var videoViewController: VideoViewController = &#123; return VideoViewController() &#125;() private lazy var keynoteViewController: KeynoteViewController = &#123; return KeynoteViewController() &#125;() private lazy var chatViewController: ChatViewController = &#123; return ChatViewController() &#125;() override func viewDidLoad() &#123; super.viewDidLoad() &#125; // MARK: - Add Child View Controllers private func setupInterface() &#123; addChild(videoViewController) addChild(keynoteViewController) addChild(chatViewController) view.addSubViews([ videoViewController.view, keynoteViewController, chatViewController ]) // 这里进行对子控制器的 View 的布局 videoViewController.didMove(toParent: self) keynoteViewController.didMove(toParent: self) chatViewController.didMove(toParent: self) &#125; // MARK: - Remove Child View Controller private func remove(asChild viewController: UIViewController) &#123; // Notify Child View Controller viewController.willMove(toParent: nil) // Remove Child View From Superview viewController.view.removeFromSuperview() // Notify Child View Controller viewController.removeFromParentViewController() &#125;&#125; 这里需要注意的点是在做布局之前要使用 addChild(:) 方法，这样会触发子控制器的 willMove(toParent:) 方法，并且在布局完后要使用 didMove(toParent:) 方法。在移除 Child View Controller 的时候也需要重复相似的步骤，在移除 View 之前要使用 willMove(toParent:)， 在移除 View 之后使用 removeFromParentViewController() 方法。这样的做的好处是可以把子控制器的生命周期纳入父控制器的控制范围：在父控制器加入或者移除子控制器的时候能够触发子控制器的 viewWillAppear 和 viewWillDisappear 的方法。 结论View Controller Containment 是一种非常实用的重构 UI 的设计模式，我在接触了这种模式后就开始欲罢不能（谁用谁知道）。这种模式不仅能增加代码的复用性和可拓展性，还可以将逻辑进行分离从而增加代码的可读性。所以把它加入你的 skill set 中会给你以后的工作和学习带来很大的益处。 相关链接：Managing View Controllers With Container View Controllers]]></content>
      <categories>
        <category>学习笔记</category>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS 中的并发性问题]]></title>
    <url>%2F2018%2F11%2F27%2Fconcurrency-in-iOS%2F</url>
    <content type="text"><![CDATA[本文主要记录在学习 iOS 的过程中关于并发性的问题。 前言之前在开发过程中曾经遇到过挺多次并发的问题，比如在自己写 networking 代码的时候会遇到一些（对！我是自己手写 networking code， 老板禁止使用 Alamofire， 所以我就自己写了一个很小的库，以后有机会跟大家分享），但都是比较皮毛的东西，感觉自己并没有深入理解并发行的问题，现在下定决心好好研究一下并发性，毕竟面试会考挺多而且以后也会碰到很多。 背景现在很多事情都是多线的，电脑是多核的，手机是双卡双待的，你看我，我可以一边写博客，一边玩LOL(呃，不知道为什么就抄袭了爱情公寓的台词，不过好像有点讽刺)。其实我是想说，由于现在手机是多核的，意味着同一时间手机可以同时处理多个问题，于是很多现代操作系统比如 iOS 和 OS10 就利用利用了这个特点而使用多线程。在这里我就想提出一个千古难题，进程和线程的区别是啥，说实话，到今天之前我对这两个概念还是比较模糊。进程的定义是正在执行程序的一个实体，线程定义是程序的执行路径。简而言之,在 iOS 系统中，进程可以理解为就是一个 App, 而线程是程序执行流的最小单元，一个进程至少有一个线程。其实我的理解也还没到完全的地步，大家可以参考我所理解的 iOS 并发编程和进程和线程的区别。并发性有很多可以研究的问题，下面我想主要说一下 GCD 和 Operation Queue。 Main Queue vs. Background Queue在 iOS 中有两个重要的概念，Main Queue 和 Background Queue，这两个东西有什么用呢？ 试想一下，如果你每次打开抖音都会先白屏三秒钟才出现图片，那你还会这么没日没夜的刷它吗？ 如果出现这种情况，最有可能的情况只有两种： iPhone XS 在向你招手，扔掉手中的老手机，下一站，黑市交易所。 本来应该在 Background Queue 运行的 networking 奇瑞跑到了 Main Queue 的快车道上蹩住了你的校长牌阿斯顿 UI。 一般情况下, 第二种情况发生的概率比较大。那么要怎么办呢？当然是利用你尊贵的身份改变交通规则，让开奇瑞的全部都去慢车道开，如果进入快车道，可以直接没收作案工具。这在现实生活中可能显得有点扯淡(?)。但是在 iOS 中不失为一种非常有效率的解决办法。 让运行较慢的 networking code 进入 Background Queue 运行，等到运行完成了再通知系统更新 UI。 这样就能大大提高用户体验，让用户刷抖音到天亮不是梦。 Grand Central Dispatch(GCD)先讲一点点历史， GCD 为什么要叫 Grand Central Dispatch 而不是 Large Central Dispatch 或者 Big Central Dispatch ? 这是由于在纽约有一个非常著名的地铁站叫 Grand Central Terminal，这个地方差不多是曼哈顿中一个地标型站点，后来程序员们在设计 GCD 的时候觉得在管理不同的线程的时候和 Grand Central Terminal 有异曲同工之妙，然后就堂而皇之的抄袭(程序猿的事能算抄吗）了这个名字。如果你是一个 iOS 开发员并且有幸去纽约玩的话一定要去膜拜一下这个有意义的站点。 GCD 作为苹果推荐的管理多线程的方式，肯定是有他的优势的，首先它的运行速度极快（每个 block 的运行速度是纳秒级别的）; 其次, GCD 的调用接口非常简单，只需要在最后的 closure 中写入要执行的代码就可以调用了，代码结构清晰，要做什么也显得一目了然，所以在网络请求和图片的异步加载中经常能看到它的身影。 GCD 中有两个核心的概念： 任务和队列 任务 GCD 中的任务就是加入到 closure 中的那一段代码，任务按照执行方式分为两种： 同步执行的任务会阻塞当前线程，等待 closure 中的代码执行完成后当前线程才会继续。 异步执行的任务不会阻塞当前线程，当前线程会继续执行。 队列 GCD 中队列指的是任务的等待队列，也就是在任务进入线程执行前排队的地方。队列遵循先进先出（FIFO）的原则，队列也分为两种： 串行队列无法开启新的线程，所以线程中的任务会在当前线程一个一个执行，也就是说前一个任务执行完了下一个任务才会开始执行。这个就像在奶茶店门口买奶茶一样，只有上一个顾客买完了，下一个才可以买。 并行队列有开启新线程的能力，所以线程中的任务无需等待上一个任务完成就可以进入其他线程执行（但整个队列还是遵循先进先出的原则，只不过队列分发的特别快，看起来像一起执行）。这个就像在银行排队办理业务，因为有好多窗口，所以下一个人没必要等上一个人办理完业务才开始办理（除非窗口已全部被占用）。 队列的创建在实际应用中，我们碰到的有三种常用队列：主队列，全局队列和自创队列。 首先我们先看自创队列：12// Swiftlet backgroundQueue = DispatchQueue(label: "com.cyberhex.concurrent.queue", attributes: .concurrent) 上边就是创建队列的过程，DispatchQueue 的构造函数需要好多个参数，但是除了 label 其他的都是可选参数（如下），一般来说创建的队列都是并行队列。 12// DispathQueue 的定义public convenience init(label: String, qos: DispatchQoS = default, attributes: DispatchQueue.Attributes = default, autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency = default, target: DispatchQueue? = default) 另外两个是可以直接调用无需创建，分别是主队列（Main Queue）和全局队列（Global Queue)。 其中主队列是串行队列，主要用于处理 UI 相关的任务，其他耗时的任务如网络请求或者下载图片需要另开线程进行处理，给 UI 大爷让路。 说到这个我想扯一个不是特别相关的，前一阵面试某条被问到了一个关于主队列的问题，具体是：为什么 UI 不能在主线程之外的线程运行，为什么系统会报错。说实话，我还真是没有了解过，面试完了以后查了资料才明白。 简单来说就是 UIKit 不是线程安全的，所以如果在其他线程更新 UI 会引起整个应用 UI 的混乱，具体为什么 UIKit 不是线程安全的等其他问题，大家可以看这篇博客 回到正题，全剧队列是一个并行的队列，你可以把需要并行处理的任务交给它来处理。主队列和全局队列的获取如下： 123// DispathQueue 的定义let mainQueue = DispatchQueue.mainlet globalQueue = DispatchQueue.global() GCD 就暂时先说到这里，我知道还有很多其他的东西比如信号量（Semaphore）和 DispatchWorkItem，这些以后有机会了再总结。 Operation 和 Operation QueueOperation 是对于 GCD 的一个封装，相比于轻量级的 GCD，Operation 是完全面向对象的，它提供了多个接口可以实现暂停、继续、终止、优先顺序、依赖等复杂操作，比 GCD 更加灵活。在运行速度方面不如 GCD，是处于毫秒级别。 Operation 和 Operation Queue 对应与 GCD 的任务和队列，所以与之相对应的，它也有同步异步，串行并行之分，只不过表现形式不同。 Bonus最后奉上我只在在某大厂笔试碰到的两道与GCD 和 Operation Queue 相关的题目。 请写出下面代码执行顺序以及每次执行前等待了多长时间？并解释下原因？ 123456789101112// DispathQueue 的定义DispatchQueue.main.async &#123; DispatchQueue.main.async &#123; sleep(2) print("1"+"\(Thread.current)") &#125; print("2" + "\(Thread.current)") DispatchQueue.main.async &#123; print("3" + "\(Thread.current)") &#125;&#125;sleep(1) 如果把上面的DispatchQueue.main.async都改成DispatchQueue.global().async是怎么输出呢？并解释下原因？ 如果下面这种情况请输出print输出顺序？并解释原因，如果maxConcurrentOperationCount = 1结果会是什么样子？ 1234567891011121314// DispathQueue 的定义let queue = OperationQueue() queue.maxConcurrentOperationCount = 2 queue.addOperation &#123; queue.addOperation &#123; sleep(2) print("1"+"\(Thread.current)") &#125; print("2"+"\(Thread.current)") queue.addOperation &#123; print("3"+"\(Thread.current)") &#125;&#125;sleep(2) 答案我会在下一篇博客中揭晓。 相关链接：Tree House: Concurrency in iOSLinus Torvalds 的邮件进程和线程的区别我所理解的 iOS 并发编程The GCD HandbookOBJC Concurrent ProgrammingiOS 多线程：『GCD』详尽总结]]></content>
      <categories>
        <category>学习笔记</category>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>iOS</tag>
        <tag>Nullability</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Objective-C 中 Nullability 的使用]]></title>
    <url>%2F2018%2F11%2F25%2Fnullability-annotations-in-objective-c%2F</url>
    <content type="text"><![CDATA[本文主要记录在学习 Objective-C 的过程中关于 Nullability 的问题。 背景我们都知道 Swift 和 Objective-C 可以同时存在于同一个 project 中，但想让他们俩兄弟同时幸福快乐和谐的生活在同一个项目中并不是一件容易的事。 Swift 小老弟最大的优势就是 Type Safety, 而 Objective-C 老大哥最大的“问题”就是可以有满屏的 nil。 在 Swift 中如果你想在不初始化一个变量的情况使用这个变量，你必须要提前告知 Xcode 这个变量是 optional 的， 但是 Objective-C 就没有这样的要求。 那么怎么解决这个问题呢，苹果最后引入了 Nullability 来给 Objective-C 加入一些安全保障。 举例在 Objective-C 中有以下代码： 123456789// Objective-C@interface User: NSObject@property (copy, nonatomic) NSString *username;@property (copy, nonatomic) NSString *password;- (BOOL)loginWithUsername:(NSString *)username password:(NSString *)password;@end 但是如果这段代码是存在与两种语言混合的项目中，这段代码 import 进如 Swift 之后就成了一下这样： 12345678// Swiftclass User: NSObject &#123; var username: String! var password: String! func login(withUsername username: String!, password: String!) -&gt; Bool&#125; 我们看到了满屏的惊叹号，这对于有强迫症的同学简直是一种煎熬，为什么会这样呢？因为 Swift 是 Type Safe 的语言，除非你提前申明这个变量是 optional，否则他不会让你随便给变量赋值 nil。 但是，如果在 Objective-C 中引入了 Nullability， 这个问题就会大大改善，比如下边的例子： 123456789// Objective-C@interface User: NSObject@property (nonnull, copy, nonatomic) NSString *username;@property (nullable, copy, nonatomic) NSString *password;- (BOOL)loginWithUsername:(nonnull NSString *)username password:(nonnull NSString *)password;@end 在 Swift 中，接口就会变成以下的情况： 12345678// Swiftclass User: NSObject &#123; var username: String var password: String？ func login(withUsername username: String, password: String) -&gt; Bool&#125; 但是，虽然这样解决的 Swift 和 Objective-C 之间搭桥的问题，Objective-C 本身并没有发生改变，他还是该吃吃，该喝喝，runtime 的行为模式和以前没啥区别，毕竟嘛，那什么改不了那啥。但是经过这样的改变，compiler 会站出来在我们用错 API 的时候提出警告。 四种 Nullability 标记 Pointers Properties _Null_unspecified null_unspecified 默认值，在搭桥到 Swift 后会成为 unwrapped optional _Nonnull nonnull 在搭桥到 Swift 后变成正常变量声明 _Nullable nullable 在搭桥到 Swift 后变成 optional N/A null_resettable 这种变量在读的时候不会是 nil， 但是可以重置为nil 结语这算是我第一篇正儿八经的博客了，也算是学习笔记性质的记录博客，所以内容不一定是完全正确的，所以还希望各位大佬不吝赐教，大家一起学习。 相关链接：Tree House: Nullability Annotations in Objective-C]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>iOS</tag>
        <tag>Nullability</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在前面的话]]></title>
    <url>%2F2018%2F11%2F22%2Finitial-post%2F</url>
    <content type="text"><![CDATA[梦里不知身是客，直把他乡作故乡。 这可能是来美国这四年来我第一次静下心来想好好写点东西。现在的我，蜗居在一间租来的短租房里，在美国这个大农村里卖掉了可能是生活中最重要的必备品 - 车，考虑着自己怎么会沦落到这个地步。生活与生存、梦想与现实，对于我来说不是选择题，而更像是灰掉了一个选项的无奈。可能是时候回国寻找下一个人生目标了，就算有再多的不甘心。 时空锥曾几何时，我的脑子里想着的都是相对论，康德哲学，甚至怎么样改变世界。不知从何时开始，我关心的事情完全变成了怎么样活下去。不管怎么说，在于生活的这场战争中，我是败得一派涂地。 我对相对论中的时空锥和因果律深信不疑，不知到在之前的哪个时空节点发生的事件或者是别人的时空锥的介入，让我的人生有了如此大的变化。但是这也许是命，也许是运，谁知道呢？ 展望毕竟有很长时间已经没有写东西了，本来有好多想说的话，但手放在键盘的那一刻就全忘了，能写这么些东西可能已经是绞尽脑汁了。现在说说自己接下来几个月的计划吧。 作为一个iOS Developer，我现在只会swift语言，而对于ojective-c只是知道一些皮毛，所以接下来的一段时间我要好好地学一下objective-c。 争取每学一些新的知识都把它们整理成学习笔记，这样不仅对我自己来说是一个很好的复习，对于未来可能大概也许来我博客的读者也会有很大帮助。 好好锻炼身体，可能有两三个月没有好好健身了，是时候在回国之前塑造一下新的形象。 结语虽然感觉自己很失败，但是危机并不是一个贬义词，危险与机会并存，就看自己怎么把握，说不定就走狗屎运咸鱼翻身了呢。]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
