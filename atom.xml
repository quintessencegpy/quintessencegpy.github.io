<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CyberHex</title>
  
  <subtitle>Simple(r) Always Wins.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cyberhex.me/"/>
  <updated>2018-11-26T04:53:53.396Z</updated>
  <id>http://cyberhex.me/</id>
  
  <author>
    <name>Penstein</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Objective-C 中 Nullability 的使用</title>
    <link href="http://cyberhex.me/2018/11/25/nullability-annotations-in-objective-c/"/>
    <id>http://cyberhex.me/2018/11/25/nullability-annotations-in-objective-c/</id>
    <published>2018-11-26T03:23:19.000Z</published>
    <updated>2018-11-26T04:53:53.396Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在学习 Objective-C 的过程中关于 Nullability 的问题。<br><a id="more"></a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们都知道 Swift 和 Objective-C 可以同时存在于同一个 project 中，但想让他们俩兄弟同时幸福快乐和谐的生活在同一个项目中并不是一件容易的事。 Swift 小老弟最大的优势就是 Type Safety, 而 Objective-C 老大哥最大的“问题”就是可以有满屏的 nil。 在 Swift 中如果你想在不初始化一个变量的情况使用这个变量，你必须要提前告知 Xcode 这个变量是 optional 的， 但是 Objective-C 就没有这样的要求。 那么怎么解决这个问题呢，苹果最后引入了 Nullability 来给 Objective-C 加入一些安全保障。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>在 Objective-C 中有以下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Objective-C</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">User</span>: <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *username;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *password;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)loginWithUsername:(<span class="built_in">NSString</span> *)username</span><br><span class="line">                 password:(<span class="built_in">NSString</span> *)password;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>但是如果这段代码是存在与两种语言混合的项目中，这段代码 import 进如 Swift 之后就成了一下这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Swift</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username: <span class="type">String</span>!</span><br><span class="line">    <span class="keyword">var</span> password: <span class="type">String</span>!</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(withUsername username: String!,</span></span></span><br><span class="line"><span class="function"><span class="params">                            password: String!)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到了满屏的惊叹号，这对于有强迫症的同学简直是一种煎熬，为什么会这样呢？<br>因为 Swift 是 Type Safe 的语言，除非你提前申明这个变量是 optional，否则他不会让你随便给变量赋值 nil。</p><p>但是，如果在 Objective-C 中引入了 Nullability， 这个问题就会大大改善，比如下边的例子：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Objective-C</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">User</span>: <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonnull</span>, <span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *username;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *password;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)loginWithUsername:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)username</span><br><span class="line">                 password:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)password;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>在 Swift 中，接口就会变成以下的情况：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Swift</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> password: <span class="type">String</span>？</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(withUsername username: String,</span></span></span><br><span class="line"><span class="function"><span class="params">                            password: String)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，虽然这样解决的 Swift 和 Objective-C 之间搭桥的问题，Objective-C 本身并没有发生改变，他还是该吃吃，该喝喝，runtime 的行为模式和以前没啥区别，毕竟嘛，那什么改不了那啥。但是经过这样的改变，compiler 会站出来在我们用错 API 的时候提出警告。</p><h2 id="四种-Nullability-标记"><a href="#四种-Nullability-标记" class="headerlink" title="四种 Nullability 标记"></a>四种 Nullability 标记</h2><table><thead><tr><th style="text-align:center">Pointers</th><th style="text-align:center">Properties</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">_Null_unspecified</td><td style="text-align:center">null_unspecified</td><td style="text-align:center">默认值，在搭桥到 Swift 后会成为 unwrapped optional</td></tr><tr><td style="text-align:center">_Nonnull</td><td style="text-align:center">nonnull</td><td style="text-align:center">在搭桥到 Swift 后变成正常变量声明</td></tr><tr><td style="text-align:center">_Nullable</td><td style="text-align:center">nullable</td><td style="text-align:center">在搭桥到 Swift 后变成 optional</td></tr><tr><td style="text-align:center">N/A</td><td style="text-align:center">null_resettable</td><td style="text-align:center">这种变量在读的时候不会是 nil， 但是可以重置为nil</td></tr></tbody></table><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这算是我第一篇正儿八经的博客了，也算是学习笔记性质的记录博客，所以内容不一定是完全正确的，所以还希望各位大佬不吝赐教，大家一起学习。</p><div class="note info"><p>相关链接：</p><p><a href="https://teamtreehouse.com/library/nullability-annotations-in-objectivec" target="_blank" rel="noopener">Tree House: Nullability Annotations in Objective-C</a></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录在学习 Objective-C 的过程中关于 Nullability 的问题。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://cyberhex.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Objective-C" scheme="http://cyberhex.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Objective-C/"/>
    
    
      <category term="Objective-C" scheme="http://cyberhex.me/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://cyberhex.me/tags/iOS/"/>
    
      <category term="Nullability" scheme="http://cyberhex.me/tags/Nullability/"/>
    
  </entry>
  
  <entry>
    <title>写在前面的话</title>
    <link href="http://cyberhex.me/2018/11/22/initial-post/"/>
    <id>http://cyberhex.me/2018/11/22/initial-post/</id>
    <published>2018-11-22T18:27:54.000Z</published>
    <updated>2018-11-23T00:51:20.991Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">梦里不知身是客，直把他乡作故乡。</blockquote><br><a id="more"></a></p><p>这可能是来美国这四年来我第一次静下心来想好好写点东西。现在的我，蜗居在一间租来的短租房里，在美国这个大农村里卖掉了可能是生活中最重要的必备品 - 车，考虑着自己怎么会沦落到这个地步。生活与生存、梦想与现实，对于我来说不是选择题，而更像是灰掉了一个选项的无奈。可能是时候回国寻找下一个人生目标了，就算有再多的不甘心。</p><h2 id="时空锥"><a href="#时空锥" class="headerlink" title="时空锥"></a>时空锥</h2><p>曾几何时，我的脑子里想着的都是相对论，康德哲学，甚至怎么样改变世界。不知从何时开始，我关心的事情完全变成了怎么样活下去。不管怎么说，在于生活的这场战争中，我是败得一派涂地。</p><p>我对相对论中的时空锥和因果律深信不疑，不知到在之前的哪个时空节点发生的事件或者是别人的时空锥的介入，让我的人生有了如此大的变化。但是这也许是命，也许是运，谁知道呢？</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>毕竟有很长时间已经没有写东西了，本来有好多想说的话，但手放在键盘的那一刻就全忘了，能写这么些东西可能已经是绞尽脑汁了。现在说说自己接下来几个月的计划吧。</p><ol><li>作为一个iOS Developer，我现在只会swift语言，而对于ojective-c只是知道一些皮毛，所以接下来的一段时间我要好好地学一下objective-c。</li><li>争取每学一些新的知识都把它们整理成学习笔记，这样不仅对我自己来说是一个很好的复习，对于未来可能大概也许来我博客的读者也会有很大帮助。</li><li>好好锻炼身体，可能有两三个月没有好好健身了，是时候在回国之前塑造一下新的形象。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>虽然感觉自己很失败，但是危机并不是一个贬义词，危险与机会并存，就看自己怎么把握，说不定就走狗屎运咸鱼翻身了呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;梦里不知身是客，直把他乡作故乡。&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="感悟" scheme="http://cyberhex.me/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="随笔" scheme="http://cyberhex.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
