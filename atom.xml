<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CyberHex</title>
  
  <subtitle>Simple(r) Always Wins.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cyberhex.me/"/>
  <updated>2019-03-30T12:15:56.070Z</updated>
  <id>http://cyberhex.me/</id>
  
  <author>
    <name>Penstein</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 中的并发性问题</title>
    <link href="http://cyberhex.me/2018/11/27/concurrency-in-iOS/"/>
    <id>http://cyberhex.me/2018/11/27/concurrency-in-iOS/</id>
    <published>2018-11-27T05:39:41.000Z</published>
    <updated>2019-03-30T12:15:56.070Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在学习 iOS 的过程中关于并发性的问题。<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在开发过程中曾经遇到过挺多次并发的问题，比如在自己写 networking 代码的时候会遇到一些（对！我是自己手写 networking code， 老板禁止使用 Alamofire， 所以我就自己写了一个很小的库，以后有机会跟大家分享），但都是比较皮毛的东西，感觉自己并没有深入理解并发行的问题，现在下定决心好好研究一下并发性，毕竟面试会考挺多而且以后也会碰到很多。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>现在很多事情都是多线的，电脑是多核的，手机是双卡双待的，你看我，我可以一边写博客，一边玩LOL(呃，不知道为什么就抄袭了爱情公寓的台词，不过好像有点讽刺)。其实我是想说，由于现在手机是多核的，意味着同一时间手机可以同时处理多个问题，于是很多现代操作系统比如 iOS 和 OS10 就利用利用了这个特点而使用多线程。在这里我就想提出一个千古难题，进程和线程的区别是啥，说实话，到今天之前我对这两个概念还是比较模糊。进程的定义是正在执行程序的一个实体，线程定义是程序的执行路径。简而言之,在 iOS 系统中，进程可以理解为就是一个 App, 而线程是程序执行流的最小单元，一个进程至少有一个线程。其实我的理解也还没到完全的地步，大家可以参考<a href="https://juejin.im/post/5b1cf4fa6fb9a01e4b062771" target="_blank" rel="noopener">我所理解的 iOS 并发编程</a>和<a href="https://www.cnblogs.com/lmule/archive/2010/08/18/1802774.html" target="_blank" rel="noopener">进程和线程的区别</a>。并发性有很多可以研究的问题，下面我想主要说一下 GCD 和 Operation Queue。</p><h2 id="Main-Queue-vs-Background-Queue"><a href="#Main-Queue-vs-Background-Queue" class="headerlink" title="Main Queue vs. Background Queue"></a>Main Queue vs. Background Queue</h2><p>在 iOS 中有两个重要的概念，Main Queue 和 Background Queue，这两个东西有什么用呢？ 试想一下，如果你每次打开抖音都会先白屏三秒钟才出现图片，那你还会这么没日没夜的刷它吗？ 如果出现这种情况，最有可能的情况只有两种：</p><ol><li>iPhone XS 在向你招手，扔掉手中的老手机，下一站，黑市交易所。</li><li>本来应该在 Background Queue 运行的 networking 奇瑞跑到了 Main Queue 的快车道上蹩住了你的校长牌阿斯顿 UI。</li></ol><p>一般情况下, 第二种情况发生的概率比较大。那么要怎么办呢？当然是利用你尊贵的身份改变交通规则，让开奇瑞的全部都去慢车道开，如果进入快车道，可以直接没收作案工具。这在现实生活中可能显得有点扯淡(?)。但是在 iOS 中不失为一种非常有效率的解决办法。 让运行较慢的 networking code 进入 Background Queue 运行，等到运行完成了再通知系统更新 UI。 这样就能大大提高用户体验，让用户刷抖音到天亮不是梦。</p><h2 id="Grand-Central-Dispatch-GCD"><a href="#Grand-Central-Dispatch-GCD" class="headerlink" title="Grand Central Dispatch(GCD)"></a>Grand Central Dispatch(GCD)</h2><p>先讲一点点历史， GCD 为什么要叫 Grand Central Dispatch 而不是 Large Central Dispatch 或者 Big Central Dispatch ? 这是由于在纽约有一个非常著名的地铁站叫 Grand Central Terminal，这个地方差不多是曼哈顿中一个地标型站点，后来程序员们在设计 GCD 的时候觉得在管理不同的线程的时候和 Grand Central Terminal 有异曲同工之妙，然后就堂而皇之的抄袭(程序猿的事能算抄吗）了这个名字。如果你是一个 iOS 开发员并且有幸去纽约玩的话一定要去膜拜一下这个有意义的站点。</p><p>GCD 作为苹果推荐的管理多线程的方式，肯定是有他的优势的，首先它的运行速度极快（每个 block 的运行速度是纳秒级别的）; 其次, GCD 的调用接口非常简单，只需要在最后的 closure 中写入要执行的代码就可以调用了，代码结构清晰，要做什么也显得一目了然，所以在网络请求和图片的异步加载中经常能看到它的身影。</p><p>GCD 中有两个核心的概念： 任务和队列</p><blockquote><p>任务</p></blockquote><p>GCD 中的任务就是加入到 closure 中的那一段代码，任务按照执行方式分为两种：</p><ol><li>同步执行的任务会阻塞当前线程，等待 closure 中的代码执行完成后当前线程才会继续。</li><li>异步执行的任务不会阻塞当前线程，当前线程会继续执行。</li></ol><blockquote><p>队列</p></blockquote><p>GCD 中队列指的是任务的等待队列，也就是在任务进入线程执行前排队的地方。队列遵循先进先出（FIFO）的原则，队列也分为两种：</p><ol><li>串行队列无法开启新的线程，所以线程中的任务会在当前线程一个一个执行，也就是说前一个任务执行完了下一个任务才会开始执行。这个就像在奶茶店门口买奶茶一样，只有上一个顾客买完了，下一个才可以买。</li><li>并行队列有开启新线程的能力，所以线程中的任务无需等待上一个任务完成就可以进入其他线程执行（但整个队列还是遵循先进先出的原则，只不过队列分发的特别快，看起来像一起执行）。这个就像在银行排队办理业务，因为有好多窗口，所以下一个人没必要等上一个人办理完业务才开始办理（除非窗口已全部被占用）。</li></ol><h3 id="队列的创建"><a href="#队列的创建" class="headerlink" title="队列的创建"></a>队列的创建</h3><p>在实际应用中，我们碰到的有三种常用队列：主队列，全局队列和自创队列。</p><p>首先我们先看自创队列：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Swift</span></span><br><span class="line"><span class="keyword">let</span> backgroundQueue = <span class="type">DispatchQueue</span>(label: <span class="string">"com.cyberhex.concurrent.queue"</span>, attributes: .concurrent)</span><br></pre></td></tr></table></figure></p><p>上边就是创建队列的过程，DispatchQueue 的构造函数需要好多个参数，但是除了 label 其他的都是可选参数（如下），一般来说创建的队列都是并行队列。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DispathQueue 的定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(label: <span class="type">String</span>, qos: <span class="type">DispatchQoS</span> = <span class="keyword">default</span>, attributes: <span class="type">DispatchQueue</span>.<span class="type">Attributes</span> = <span class="keyword">default</span>, autoreleaseFrequency: <span class="type">DispatchQueue</span>.<span class="type">AutoreleaseFrequency</span> = <span class="keyword">default</span>, target: <span class="type">DispatchQueue</span>? = <span class="keyword">default</span>)</span><br></pre></td></tr></table></figure><p>另外两个是可以直接调用无需创建，分别是主队列（Main Queue）和全局队列（Global Queue)。</p><p>其中主队列是串行队列，主要用于处理 UI 相关的任务，其他耗时的任务如网络请求或者下载图片需要另开线程进行处理，给 UI 大爷让路。</p><p>说到这个我想扯一个不是特别相关的，前一阵面试某条被问到了一个关于主队列的问题，具体是：为什么 UI 不能在主线程之外的线程运行，为什么系统会报错。说实话，我还真是没有了解过，面试完了以后查了资料才明白。</p><p>简单来说就是 UIKit 不是线程安全的，所以如果在其他线程更新 UI 会引起整个应用 UI 的混乱，具体为什么 UIKit 不是线程安全的等其他问题，大家可以看<a href="https://blog.csdn.net/qq_36557133/article/details/86531816" target="_blank" rel="noopener">这篇博客</a></p><p>回到正题，全剧队列是一个并行的队列，你可以把需要并行处理的任务交给它来处理。主队列和全局队列的获取如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DispathQueue 的定义</span></span><br><span class="line"><span class="keyword">let</span> mainQueue = <span class="type">DispatchQueue</span>.main</span><br><span class="line"><span class="keyword">let</span> globalQueue = <span class="type">DispatchQueue</span>.global()</span><br></pre></td></tr></table></figure><p>GCD 就暂时先说到这里，我知道还有很多其他的东西比如信号量（Semaphore）和 DispatchWorkItem，这些以后有机会了再总结。</p><h2 id="Operation-和-Operation-Queue"><a href="#Operation-和-Operation-Queue" class="headerlink" title="Operation 和 Operation Queue"></a>Operation 和 Operation Queue</h2><p>Operation 是对于 GCD 的一个封装，相比于轻量级的 GCD，Operation 是完全面向对象的，它提供了多个接口可以实现暂停、继续、终止、优先顺序、依赖等复杂操作，比 GCD 更加灵活。在运行速度方面不如 GCD，是处于毫秒级别。</p><p>Operation 和 Operation Queue 对应与 GCD 的任务和队列，所以与之相对应的，它也有同步异步，串行并行之分，只不过表现形式不同。</p><h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h2><p>最后奉上我只在在某大厂笔试碰到的两道与GCD 和 Operation Queue 相关的题目。</p><ol><li>请写出下面代码执行顺序以及每次执行前等待了多长时间？并解释下原因？</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DispathQueue 的定义</span></span><br><span class="line"><span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                sleep(<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"1"</span>+<span class="string">"\(Thread.current)"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"2"</span> + <span class="string">"\(Thread.current)"</span>)</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"3"</span> + <span class="string">"\(Thread.current)"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>如果把上面的DispatchQueue.main.async都改成DispatchQueue.global().async是怎么输出呢？并解释下原因？</p></li><li><p>如果下面这种情况请输出print输出顺序？并解释原因，如果maxConcurrentOperationCount = 1结果会是什么样子？</p></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DispathQueue 的定义</span></span><br><span class="line"><span class="keyword">let</span> queue = <span class="type">OperationQueue</span>()</span><br><span class="line">        queue.maxConcurrentOperationCount = <span class="number">2</span></span><br><span class="line">        queue.addOperation &#123;</span><br><span class="line">            queue.addOperation &#123;</span><br><span class="line">                sleep(<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"1"</span>+<span class="string">"\(Thread.current)"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"2"</span>+<span class="string">"\(Thread.current)"</span>)</span><br><span class="line">            queue.addOperation &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"3"</span>+<span class="string">"\(Thread.current)"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>答案我会在下一篇博客中揭晓。</p><div class="note info"><p>相关链接：</p><p><a href="https://teamtreehouse.com/library/concurrency-in-ios" target="_blank" rel="noopener">Tree House: Concurrency in iOS</a><br><a href="http://lkml.iu.edu/hypermail/linux/kernel/9608/0191.html" target="_blank" rel="noopener">Linus Torvalds 的邮件</a><br><a href="https://www.cnblogs.com/lmule/archive/2010/08/18/1802774.html" target="_blank" rel="noopener">进程和线程的区别</a><br><a href="https://juejin.im/post/5b1cf4fa6fb9a01e4b062771" target="_blank" rel="noopener">我所理解的 iOS 并发编程</a><br><a href="http://khanlou.com/2016/04/the-GCD-handbook/" target="_blank" rel="noopener">The GCD Handbook</a><br><a href="https://www.objc.io/issues/2-concurrency/" target="_blank" rel="noopener">OBJC Concurrent Programming</a><br><a href="https://www.jianshu.com/p/2d57c72016c6" target="_blank" rel="noopener">iOS 多线程：『GCD』详尽总结</a></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录在学习 iOS 的过程中关于并发性的问题。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://cyberhex.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="iOS" scheme="http://cyberhex.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/iOS/"/>
    
    
      <category term="Objective-C" scheme="http://cyberhex.me/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://cyberhex.me/tags/iOS/"/>
    
      <category term="Nullability" scheme="http://cyberhex.me/tags/Nullability/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 中 Nullability 的使用</title>
    <link href="http://cyberhex.me/2018/11/25/nullability-annotations-in-objective-c/"/>
    <id>http://cyberhex.me/2018/11/25/nullability-annotations-in-objective-c/</id>
    <published>2018-11-25T14:23:19.000Z</published>
    <updated>2018-11-26T04:56:07.504Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在学习 Objective-C 的过程中关于 Nullability 的问题。<br><a id="more"></a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们都知道 Swift 和 Objective-C 可以同时存在于同一个 project 中，但想让他们俩兄弟同时幸福快乐和谐的生活在同一个项目中并不是一件容易的事。 Swift 小老弟最大的优势就是 Type Safety, 而 Objective-C 老大哥最大的“问题”就是可以有满屏的 nil。 在 Swift 中如果你想在不初始化一个变量的情况使用这个变量，你必须要提前告知 Xcode 这个变量是 optional 的， 但是 Objective-C 就没有这样的要求。 那么怎么解决这个问题呢，苹果最后引入了 Nullability 来给 Objective-C 加入一些安全保障。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>在 Objective-C 中有以下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Objective-C</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">User</span>: <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *username;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *password;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)loginWithUsername:(<span class="built_in">NSString</span> *)username</span><br><span class="line">                 password:(<span class="built_in">NSString</span> *)password;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>但是如果这段代码是存在与两种语言混合的项目中，这段代码 import 进如 Swift 之后就成了一下这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Swift</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username: <span class="type">String</span>!</span><br><span class="line">    <span class="keyword">var</span> password: <span class="type">String</span>!</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(withUsername username: String!,</span></span></span><br><span class="line"><span class="function"><span class="params">                            password: String!)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到了满屏的惊叹号，这对于有强迫症的同学简直是一种煎熬，为什么会这样呢？<br>因为 Swift 是 Type Safe 的语言，除非你提前申明这个变量是 optional，否则他不会让你随便给变量赋值 nil。</p><p>但是，如果在 Objective-C 中引入了 Nullability， 这个问题就会大大改善，比如下边的例子：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Objective-C</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">User</span>: <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonnull</span>, <span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *username;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *password;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)loginWithUsername:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)username</span><br><span class="line">                 password:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)password;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>在 Swift 中，接口就会变成以下的情况：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Swift</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> password: <span class="type">String</span>？</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(withUsername username: String,</span></span></span><br><span class="line"><span class="function"><span class="params">                            password: String)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，虽然这样解决的 Swift 和 Objective-C 之间搭桥的问题，Objective-C 本身并没有发生改变，他还是该吃吃，该喝喝，runtime 的行为模式和以前没啥区别，毕竟嘛，那什么改不了那啥。但是经过这样的改变，compiler 会站出来在我们用错 API 的时候提出警告。</p><h2 id="四种-Nullability-标记"><a href="#四种-Nullability-标记" class="headerlink" title="四种 Nullability 标记"></a>四种 Nullability 标记</h2><table><thead><tr><th style="text-align:center">Pointers</th><th style="text-align:center">Properties</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">_Null_unspecified</td><td style="text-align:center">null_unspecified</td><td style="text-align:center">默认值，在搭桥到 Swift 后会成为 unwrapped optional</td></tr><tr><td style="text-align:center">_Nonnull</td><td style="text-align:center">nonnull</td><td style="text-align:center">在搭桥到 Swift 后变成正常变量声明</td></tr><tr><td style="text-align:center">_Nullable</td><td style="text-align:center">nullable</td><td style="text-align:center">在搭桥到 Swift 后变成 optional</td></tr><tr><td style="text-align:center">N/A</td><td style="text-align:center">null_resettable</td><td style="text-align:center">这种变量在读的时候不会是 nil， 但是可以重置为nil</td></tr></tbody></table><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这算是我第一篇正儿八经的博客了，也算是学习笔记性质的记录博客，所以内容不一定是完全正确的，所以还希望各位大佬不吝赐教，大家一起学习。</p><div class="note info"><p>相关链接：</p><p><a href="https://teamtreehouse.com/library/nullability-annotations-in-objectivec" target="_blank" rel="noopener">Tree House: Nullability Annotations in Objective-C</a></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录在学习 Objective-C 的过程中关于 Nullability 的问题。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://cyberhex.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Objective-C" scheme="http://cyberhex.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Objective-C/"/>
    
    
      <category term="Objective-C" scheme="http://cyberhex.me/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://cyberhex.me/tags/iOS/"/>
    
      <category term="Nullability" scheme="http://cyberhex.me/tags/Nullability/"/>
    
  </entry>
  
  <entry>
    <title>写在前面的话</title>
    <link href="http://cyberhex.me/2018/11/22/initial-post/"/>
    <id>http://cyberhex.me/2018/11/22/initial-post/</id>
    <published>2018-11-22T05:27:54.000Z</published>
    <updated>2019-03-17T12:17:34.609Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">梦里不知身是客，直把他乡作故乡。</blockquote><br><a id="more"></a></p><p>这可能是来美国这四年来我第一次静下心来想好好写点东西。现在的我，蜗居在一间租来的短租房里，在美国这个大农村里卖掉了可能是生活中最重要的必备品 - 车，考虑着自己怎么会沦落到这个地步。生活与生存、梦想与现实，对于我来说不是选择题，而更像是灰掉了一个选项的无奈。可能是时候回国寻找下一个人生目标了，就算有再多的不甘心。</p><h2 id="时空锥"><a href="#时空锥" class="headerlink" title="时空锥"></a>时空锥</h2><p>曾几何时，我的脑子里想着的都是相对论，康德哲学，甚至怎么样改变世界。不知从何时开始，我关心的事情完全变成了怎么样活下去。不管怎么说，在于生活的这场战争中，我是败得一派涂地。</p><p>我对相对论中的时空锥和因果律深信不疑，不知到在之前的哪个时空节点发生的事件或者是别人的时空锥的介入，让我的人生有了如此大的变化。但是这也许是命，也许是运，谁知道呢？</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>毕竟有很长时间已经没有写东西了，本来有好多想说的话，但手放在键盘的那一刻就全忘了，能写这么些东西可能已经是绞尽脑汁了。现在说说自己接下来几个月的计划吧。</p><ol><li>作为一个iOS Developer，我现在只会swift语言，而对于ojective-c只是知道一些皮毛，所以接下来的一段时间我要好好地学一下objective-c。</li><li>争取每学一些新的知识都把它们整理成学习笔记，这样不仅对我自己来说是一个很好的复习，对于未来可能大概也许来我博客的读者也会有很大帮助。</li><li>好好锻炼身体，可能有两三个月没有好好健身了，是时候在回国之前塑造一下新的形象。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>虽然感觉自己很失败，但是危机并不是一个贬义词，危险与机会并存，就看自己怎么把握，说不定就走狗屎运咸鱼翻身了呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;梦里不知身是客，直把他乡作故乡。&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="感悟" scheme="http://cyberhex.me/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="随笔" scheme="http://cyberhex.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
